<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="expertManagement">
	
	<!-- 소분류 코드로 전문가 정보 리스트 검색 -->
	<select id="viewExpertListByThirdCd"
	parameterType="string"
	resultType="expertIntro">
	SELECT
	    E.MEMBER_NO AS memberNo,
	    E.MEMBER_ID AS expertId,
	    E.MEMBER_PW AS expertPw,
	    E.MEMBER_NICKNAME AS expertNickname,
	    E.MEMBER_PHONE AS expertPhone,
	    E.MEMBER_ADDR AS expertAddr,
	    E.MEMBER_GENDER AS expertGender,
	    E.MEMBER_EMAIL AS expertEmail,
	    W.MEMBER_TYPE AS memberType,
	    E.ENROLL_DATE AS enrollDate,
	    M.THIRD_CATEGORY_CD AS thirdCategoryCd,
	    M.EXPERT_GRADE AS expertGrade,
	    M.EXPERT_FILE_NAME AS expertFileName,
	    M.EXPERT_FILE_PATH AS expertFilePath,
	    I.INTRODUCE_TITLE AS introduceTitle,
	    I.INTRODUCE_CONTENT AS introduceContent,
	    I.EXPERT_LIKE AS expertLike,
    	I.EXPERT_DISLIKE AS expertDislike,
    	E.PROFILE_PATH AS profilePath,
        E.PROFILE_NAME AS profileName
    FROM TBL_EXCO E
   	LEFT JOIN TBL_EXPERT_MANAGEMENT M
	ON E.MEMBER_NO = M.MEMBER_NO
	LEFT JOIN TBL_WHOLE_MEMBER W
	ON E.MEMBER_NO = W.MEMBER_NO
	LEFT JOIN TBL_EXPERT_INTRODUCE I
	ON I.MEMBER_NO = E.MEMBER_NO
	WHERE M.THIRD_CATEGORY_CD = #{thirdCode}
	</select>
	
	<select id="viewExpertInfoByMemberNo"
	parameterType="string"
	resultType="expertIntro">
	SELECT
	    E.MEMBER_NO AS memberNo,
	    E.MEMBER_ID AS expertId,
	    E.MEMBER_PW AS expertPw,
	    E.MEMBER_NICKNAME AS expertNickname,
	    E.MEMBER_PHONE AS expertPhone,
	    E.MEMBER_ADDR AS expertAddr,
	    E.MEMBER_GENDER AS expertGender,
	    E.MEMBER_EMAIL AS expertEmail,
	    W.MEMBER_TYPE AS memberType,
	    E.ENROLL_DATE AS enrollDate,
	    M.THIRD_CATEGORY_CD AS thirdCategoryCd,
	    M.EXPERT_GRADE AS expertGrade,
	    M.EXPERT_FILE_NAME AS expertFileName,
	    M.EXPERT_FILE_PATH AS expertFilePath,
	    I.INTRODUCE_TITLE AS introduceTitle,
	    I.INTRODUCE_CONTENT AS introduceContent,
	    I.EXPERT_LIKE AS expertLike,
	    I.EXPERT_DISLIKE AS expertDislike,
	    I.INTRO_NO AS introNo,
	    C.THIRD_CATEGORY_NM AS thirdCategoryNm,
	    E.PROFILE_PATH AS profilePath,
        E.PROFILE_NAME AS profileName
	FROM TBL_EXCO E
	LEFT JOIN TBL_EXPERT_MANAGEMENT M
	    ON E.MEMBER_NO = M.MEMBER_NO
	LEFT JOIN TBL_WHOLE_MEMBER W
	    ON E.MEMBER_NO = W.MEMBER_NO
	LEFT JOIN TBL_EXPERT_INTRODUCE I
	    ON I.MEMBER_NO = E.MEMBER_NO
	LEFT JOIN TBL_CODE C
	    ON M.THIRD_CATEGORY_CD = C.THIRD_CATEGORY_CD
	WHERE TRIM(E.MEMBER_NO) = #{thirdCode}
	</select>
	
	<select id="viewAllExpertList"
	resultType="expertIntro">
	SELECT
	    E.MEMBER_NO AS memberNo,
	    E.MEMBER_ID AS expertId,
	    E.MEMBER_PW AS expertPw,
	    E.MEMBER_NICKNAME AS expertNickname,
	    E.MEMBER_PHONE AS expertPhone,
	    E.MEMBER_ADDR AS expertAddr,
	    E.MEMBER_GENDER AS expertGender,
	    E.MEMBER_EMAIL AS expertEmail,
	    W.MEMBER_TYPE AS memberType,
	    E.ENROLL_DATE AS enrollDate,
	    M.THIRD_CATEGORY_CD AS thirdCategoryCd,
	    M.EXPERT_GRADE AS expertGrade,
	    M.EXPERT_FILE_NAME AS expertFileName,
	    M.EXPERT_FILE_PATH AS expertFilePath,
	    I.INTRODUCE_TITLE AS introduceTitle,
	    I.INTRODUCE_CONTENT AS introduceContent,
	    I.EXPERT_LIKE AS expertLike,
    	I.EXPERT_DISLIKE AS expertDislike,
    	E.PROFILE_PATH AS profilePath,
        E.PROFILE_NAME AS profileName
	FROM TBL_EXCO E
	LEFT JOIN TBL_EXPERT_MANAGEMENT M
	ON E.MEMBER_NO = M.MEMBER_NO
	LEFT JOIN TBL_WHOLE_MEMBER W
	ON E.MEMBER_NO = W.MEMBER_NO
	LEFT JOIN TBL_EXPERT_INTRODUCE I
	ON I.MEMBER_NO = E.MEMBER_NO
	</select>
	
	<select id="srchExpertsByKeyList"
	parameterType="list"
	resultType="expertIntro">
	SELECT
		E.MEMBER_NO AS memberNo,
	    E.MEMBER_ID AS expertId,
	    E.MEMBER_PW AS expertPw,
	    E.MEMBER_NICKNAME AS expertNickname,
	    E.MEMBER_PHONE AS expertPhone,
	    E.MEMBER_ADDR AS expertAddr,
	    E.MEMBER_GENDER AS expertGender,
	    E.MEMBER_EMAIL AS expertEmail,
	    W.MEMBER_TYPE AS memberType,
	    E.ENROLL_DATE AS enrollDate,
	    M.THIRD_CATEGORY_CD AS thirdCategoryCd,
	    M.EXPERT_GRADE AS expertGrade,
	    M.EXPERT_FILE_NAME AS expertFileName,
	    M.EXPERT_FILE_PATH AS expertFilePath,
	    I.INTRODUCE_TITLE AS introduceTitle,
	    I.INTRODUCE_CONTENT AS introduceContent,
	    I.EXPERT_LIKE AS expertLike,
    	I.EXPERT_DISLIKE AS expertDislike,
    	E.PROFILE_PATH AS profilePath,
        E.PROFILE_NAME AS profileName
        FROM TBL_EXCO E
	LEFT JOIN TBL_EXPERT_MANAGEMENT M
	ON E.MEMBER_NO = M.MEMBER_NO
	LEFT JOIN TBL_WHOLE_MEMBER W
	ON E.MEMBER_NO = W.MEMBER_NO
	LEFT JOIN TBL_EXPERT_INTRODUCE I
	ON I.MEMBER_NO = E.MEMBER_NO
        WHERE THIRD_CATEGORY_CD IN
        <foreach collection="list" item="keywords" open="(" separator="," close=")">
            #{keywords}
        </foreach>
	</select>
	

	<!-- 챗봇 카테고리 + 지역 으로 검색 -->
	<select id="findExpertsByCategory" parameterType="map" resultType="expertIntro">
		SELECT
			E.MEMBER_NO AS memberNo,
		    E.MEMBER_ID AS expertId,
		    E.MEMBER_PW AS expertPw,
		    E.MEMBER_NICKNAME AS expertNickname,
		    E.MEMBER_PHONE AS expertPhone,
		    E.MEMBER_ADDR AS expertAddr,
		    E.MEMBER_GENDER AS expertGender,
		    E.MEMBER_EMAIL AS expertEmail,
		    W.MEMBER_TYPE AS memberType,
		    E.ENROLL_DATE AS enrollDate,
		    M.THIRD_CATEGORY_CD AS thirdCategoryCd,
	        C.THIRD_CATEGORY_NM AS thirdCategoryNm,
		    M.EXPERT_GRADE AS expertGrade,
		    M.EXPERT_FILE_NAME AS expertFileName,
		    M.EXPERT_FILE_PATH AS expertFilePath,
		    I.INTRODUCE_TITLE AS introduceTitle,
		    I.INTRODUCE_CONTENT AS introduceContent,
		    I.EXPERT_LIKE AS expertLike,
	    	I.EXPERT_DISLIKE AS expertDislike,
	    	E.PROFILE_PATH AS profilePath,
	        E.PROFILE_NAME AS profileName
	        FROM TBL_EXCO E
		LEFT JOIN TBL_EXPERT_MANAGEMENT M
		ON E.MEMBER_NO = M.MEMBER_NO
		LEFT JOIN TBL_WHOLE_MEMBER W
		ON E.MEMBER_NO = W.MEMBER_NO
		LEFT JOIN TBL_EXPERT_INTRODUCE I
		ON I.MEMBER_NO = E.MEMBER_NO
	    LEFT JOIN TBL_CODE C
	    ON M.THIRD_CATEGORY_CD = C.THIRD_CATEGORY_CD
	        WHERE C.THIRD_CATEGORY_NM = #{categoryNm} and E.MEMBER_ADDR LIKE '%' || #{addr} || '%'
    </select>

	<select id="viewBestExpertList"
	resultType="expertIntro">
	SELECT
	    MEMBER_NO AS memberNo,
	    MEMBER_ID AS expertId,
	    MEMBER_PW AS expertPw,
	    MEMBER_NICKNAME AS expertNickname,
	    MEMBER_PHONE AS expertPhone,
	    MEMBER_ADDR AS expertAddr,
	    MEMBER_GENDER AS expertGender,
	    MEMBER_EMAIL AS expertEmail,
	    MEMBER_TYPE AS memberType,
	    ENROLL_DATE AS enrollDate,
	    THIRD_CATEGORY_CD AS thirdCategoryCd,
	    EXPERT_GRADE AS expertGrade,
	    EXPERT_FILE_NAME AS expertFileName,
	    EXPERT_FILE_PATH AS expertFilePath,
	    INTRODUCE_TITLE AS introduceTitle,
	    INTRODUCE_CONTENT AS introduceContent,
	    EXPERT_LIKE AS expertLike,
	    EXPERT_DISLIKE AS expertDislike
	FROM
	    (SELECT
	        E.MEMBER_NO,
	        E.MEMBER_ID,
	        E.MEMBER_PW,
	        E.MEMBER_NICKNAME,
	        E.MEMBER_PHONE,
	        E.MEMBER_ADDR,
	        E.MEMBER_GENDER,
	        E.MEMBER_EMAIL,
	        W.MEMBER_TYPE,
	        E.ENROLL_DATE,
	        M.THIRD_CATEGORY_CD,
	        M.EXPERT_GRADE,
	        M.EXPERT_FILE_NAME,
	        M.EXPERT_FILE_PATH,
	        I.INTRODUCE_TITLE AS,
	        I.INTRODUCE_CONTENT,
	        I.EXPERT_LIKE,
	        I.EXPERT_DISLIKE,
	        E.PROFILE_PATH,
	        E.PROFILE_NAME
		FROM TBL_EXCO E
		LEFT JOIN TBL_EXPERT_MANAGEMENT M
		ON E.MEMBER_NO = M.MEMBER_NO
		LEFT JOIN TBL_WHOLE_MEMBER W
		ON E.MEMBER_NO = W.MEMBER_NO
		LEFT JOIN TBL_EXPERT_INTRODUCE I
		ON I.MEMBER_NO = E.MEMBER_NO
	    ORDER BY I.EXPERT_LIKE DESC NULLS LAST)
	    WHERE ROWNUM &lt; 6
	</select>
	
	<!-- 전문가 상세페이지 정보 탭 업데이트 -->
	<update id="updateExpertContent">
        UPDATE TBL_EXPERT_INTRODUCE
        SET INTRODUCE_TITLE = #{title}, INTRODUCE_CONTENT = #{content}
        WHERE MEMBER_NO = #{memberNo}
    </update>
    
    <!-- 전문가 상세페이지 포트폴리오 탭 업데이트 -->
    <update id="updatePortfolio" parameterType="expertIntro">
	    UPDATE TBL_EXPERT_management
	    SET expert_file_name = #{expertFileName},
	        expert_file_path = #{expertFilePath}
	    WHERE member_no = #{memberNo}
	</update>
	
	<!-- 소개번호로 리뷰리스트 가져오기 -->
	<select id="readReviewListByIntroNo"
	parameterType="string"
	resultType="review">
	SELECT
	    R.REVIEW_NO AS reviewNo,
	    R.INTRO_NO AS introNo,
	    R.MEMBER_NO AS memberNo,
	    R.WRITER AS writer,
	    NICK.MEMBER_NICKNAME AS nickname,
	    R.REVIEW_CONTENT AS reviewContent,
	    R.REVIEW_DATE AS reviewDate,
	    R.REVIEW_SCORE AS reviewScore
	FROM
	    TBL_REVIEW R
	LEFT JOIN
	    (
	        SELECT MEMBER_NO, MEMBER_NICKNAME
	        FROM (
	            SELECT MEMBER_NO, MEMBER_NICKNAME FROM TBL_EXCO
	            UNION ALL
	            SELECT MEMBER_NO, MEMBER_NICKNAME FROM TBL_KAKAO_EXCO
	            UNION ALL
	            SELECT MEMBER_NO, MEMBER_NICKNAME FROM TBL_NAVER_EXCO
	        ) W
	    ) NICK
	ON NICK.MEMBER_NO = R.WRITER
	WHERE
	    R.INTRO_NO = #{string}
	</select>
	
	<insert id="insertReview"
	parameterType="review">
	INSERT INTO
		TBL_REVIEW
		(
			REVIEW_NO,
			INTRO_NO,
			MEMBER_NO,
			WRITER,
			REVIEW_CONTENT,
			REVIEW_SCORE
		)
		VALUES
		(
			TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') || LPAD(SEQ_REVIEW_NO.NEXTVAL, 4,'0'),
			#{introNo},
			#{memberNo},
			#{writer},
			#{reviewContent},
			#{reviewScore}
		)
	</insert>
</mapper>